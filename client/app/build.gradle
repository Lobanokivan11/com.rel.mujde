plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.rel.mujde"
        minSdk 21
        targetSdk 33
        versionCode 5
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'com.rel.mujde'
    buildFeatures {
        buildConfig true
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
        warningsAsErrors false
    }

    sourceSets {
        main {
            // import frida binaries from jniLibs directory
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    ext {
        // define frida version
        fridaVersion = '16.7.0'
    }

    configurations {
        downloader
        xzTools
    }

    dependencies {
        downloader 'de.undercouch:gradle-download-task:5.4.0'
        xzTools 'org.tukaani:xz:1.9'
    }

    // apply the web downloader plugin
    apply plugin: 'de.undercouch.download'

    task downloadFrida {
        doLast {
            // make xzTools library importable
            URLClassLoader loader = new URLClassLoader(
                configurations.xzTools.files.collect { it.toURI().toURL() } as URL[],
                getClass().getClassLoader()
            )

            def jniLibsDir = new File(projectDir, 'src/main/jniLibs')
            def x86Dir = new File(jniLibsDir, 'x86')
            def x86_64Dir = new File(jniLibsDir, 'x86_64')
            def armDir = new File(jniLibsDir, 'armeabi-v7a')
            def arm64Dir = new File(jniLibsDir, 'arm64-v8a')

            arm64Dir.mkdirs()
            armDir.mkdirs()
            x86Dir.mkdirs()
            x86_64Dir.mkdirs()

            // binaries must have lib<name>.so format for android to extract them
            def injectorFileName = 'libfrida-inject.so'

            def architectures = [
                'android-arm64': new File(arm64Dir, injectorFileName),
                'android-arm': new File(armDir, injectorFileName),
                'android-x86': new File(x86Dir, injectorFileName),
                'android-x86_64': new File(x86_64Dir, injectorFileName)
            ]

            // download and extract frida-inject for each architecture
            architectures.each { arch, outputFile ->
                if (outputFile.exists()) {
                    println "frida for ${arch} already exists"
                    return
                }

                def tempDir = new File(buildDir, "frida-temp")
                tempDir.mkdirs()

                def injectorName = "frida-inject-${fridaVersion}-${arch}.xz"
                def compressedInjector = new File(tempDir, injectorName)
                def url = "https://github.com/frida/frida/releases/download/${fridaVersion}/${injectorName}"

                println "Downloading frida for ${arch} from ${url}"

                try {
                    download {
                        src url
                        dest compressedInjector
                        overwrite true
                    }

                    if (!compressedInjector.exists()) {
                        println "Downloaded file does not exist at: ${compressedInjector.absolutePath}"
                        return
                    }

                    println "Extracting Frida for ${arch}..."

                    def extractedFilePath = compressedInjector.absolutePath.replace('.xz', '')
                    def extractedFile = new File(extractedFilePath)

                    def XZInputStream = loader.loadClass('org.tukaani.xz.XZInputStream')
                    compressedInjector.withInputStream { fis ->
                        def xzIn = XZInputStream.getConstructor(java.io.InputStream.class).newInstance(fis)
                        xzIn.withStream { xzis ->
                            extractedFile.withOutputStream { fos ->
                                fos << xzis
                            }
                        }
                    }

                    extractedFile.renameTo(outputFile)
                    println "Successfully extracted Frida for ${arch}"
                } catch (Exception e) {
                    println "Error processing Frida for ${arch}: ${e.message}"
                    e.printStackTrace()
                }
            }
        }
    }

    preBuild.dependsOn downloadFrida
}

repositories {
    google()
    mavenCentral()
    maven { url 'https://api.xposed.info/' }
}

dependencies {
    implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.9'

    // Xposed hooks API
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
}
