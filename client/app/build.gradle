plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.rel.mujde"
        minSdk 21
        targetSdk 33
        versionCode 5
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'com.rel.mujde'
    buildFeatures {
        buildConfig true
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        warningsAsErrors false
    }
    
    // Add support for Frida Gadget in jniLibs directory
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    
    // Define Frida Gadget version
    ext {
        fridaVersion = '16.7.0'
    }
    
    // Add a configuration for downloading dependencies
    configurations {
        fridaGadgetDownloader
    }
    
    // Add dependency for a download tool
    dependencies {
        fridaGadgetDownloader 'de.undercouch:gradle-download-task:5.4.0'
    }
    
    // Apply the download plugin
    apply plugin: 'de.undercouch.download'
    
    // Task to download Frida Gadget libraries
    task downloadFridaGadget {
        doLast {
            // Create directories for different architectures
            def jniLibsDir = new File(projectDir, 'src/main/jniLibs')
            def arm64Dir = new File(jniLibsDir, 'arm64-v8a')
            def armDir = new File(jniLibsDir, 'armeabi-v7a')
            def x86Dir = new File(jniLibsDir, 'x86')
            def x86_64Dir = new File(jniLibsDir, 'x86_64')
            
            arm64Dir.mkdirs()
            armDir.mkdirs()
            x86Dir.mkdirs()
            x86_64Dir.mkdirs()
            
            // Define architecture mappings
            def architectures = [
                'android-arm64': new File(arm64Dir, 'libfrida-gadget.so'),
                'android-arm': new File(armDir, 'libfrida-gadget.so'),
                'android-x86': new File(x86Dir, 'libfrida-gadget.so'),
                'android-x86_64': new File(x86_64Dir, 'libfrida-gadget.so')
            ]
            
            // Download and extract for each architecture
            architectures.each { arch, outputFile ->
                if (!outputFile.exists()) {
                    def tempDir = new File(buildDir, "frida-temp")
                    tempDir.mkdirs()
                    
                    def tempFile = new File(tempDir, "frida-gadget-${fridaVersion}-${arch}.so.xz")
                    def url = "https://github.com/frida/frida/releases/download/${fridaVersion}/frida-gadget-${fridaVersion}-${arch}.so.xz"
                    
                    println "Downloading Frida Gadget for ${arch} from ${url}"
                    
                    try {
                        // Download the file
                        download {
                            src url
                            dest tempFile
                            overwrite true
                        }
                        
                        // Extract the file
                        if (tempFile.exists()) {
                            println "Extracting Frida Gadget for ${arch}..."
                            exec {
                                commandLine 'xz', '-d', '-f', '-k', tempFile.absolutePath
                            }
                            def extractedFile = new File(tempFile.absolutePath.replace('.xz', ''))
                            if (extractedFile.exists()) {
                                extractedFile.renameTo(outputFile)
                                println "Successfully extracted Frida Gadget for ${arch}"
                            } else {
                                println "Failed to extract Frida Gadget for ${arch}"
                            }
                        }
                    } catch (Exception e) {
                        println "Error processing Frida Gadget for ${arch}: ${e.message}"
                    }
                } else {
                    println "Frida Gadget for ${arch} already exists at ${outputFile}"
                }
            }
        }
    }
    
    // Make preBuild depend on downloadFridaGadget
    preBuild.dependsOn downloadFridaGadget
    
    // Fallback method: create empty placeholder files if download fails
    // This ensures the build succeeds even if downloads fail
    task createFridaPlaceholders {
        doLast {
            def jniLibsDir = new File(projectDir, 'src/main/jniLibs')
            def architectures = ['arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64']
            
            architectures.each { arch ->
                def dir = new File(jniLibsDir, arch)
                dir.mkdirs()
                
                def outputFile = new File(dir, 'libfrida-gadget.so')
                if (!outputFile.exists()) {
                    println "Creating placeholder for ${arch}/libfrida-gadget.so"
                    outputFile.createNewFile()
                }
            }
        }
    }
    
    // Make downloadFridaGadget finalizedBy createFridaPlaceholders
    // This ensures we always have the files needed for the build
    downloadFridaGadget.finalizedBy createFridaPlaceholders
}

repositories {
    google()
    mavenCentral()
    maven { url 'https://api.xposed.info/' }
}

dependencies {
    implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Xposed API
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
}
